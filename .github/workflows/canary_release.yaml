name: Canary version Release

on:
  workflow_dispatch:
    inputs:
      new_features:
        description: 'New features (use \n for line breaks, leave empty if none)'
        required: false
        type: string
        default: ''
      bug_fixes:
        description: 'Bug fixes (use \n for line breaks, leave empty if none)'
        required: false
        type: string
        default: ''
      other_changes:
        description: 'Other changes (use \n for line breaks, leave empty if none)'
        required: false
        type: string
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install
      
      - name: Get version and SHA
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          VERSION_SUFFIX=$(git rev-parse --short HEAD)
          VERSION="${PACKAGE_VERSION}-canary-${VERSION_SUFFIX}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ steps.version.outputs.version }}" -m "Canary release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"

      - name: Prepare release contents
        id: release_contents
        run: |
          # Process New Features
          if [ -n "${{ github.event.inputs.new_features }}" ]; then
            echo "## üéâ New Features" >> release_body.txt
            # Replace \n with actual line breaks and format as list items
            echo "${{ github.event.inputs.new_features }}" | sed 's/\\n/\n/g' | sed 's/^[[:space:]]*-*/- /' | sed '/^[[:space:]]*$/d' >> release_body.txt
            echo "" >> release_body.txt
          fi
          
          # Process Bug Fixes
          if [ -n "${{ github.event.inputs.bug_fixes }}" ]; then
            echo "## üêõ Bug Fixes" >> release_body.txt
            # Replace \n with actual line breaks and format as list items
            echo "${{ github.event.inputs.bug_fixes }}" | sed 's/\\n/\n/g' | sed 's/^[[:space:]]*-*/- /' | sed '/^[[:space:]]*$/d' >> release_body.txt
            echo "" >> release_body.txt
          fi
          
          # Process Other Changes
          if [ -n "${{ github.event.inputs.other_changes }}" ]; then
            echo "## üîß Other Changes" >> release_body.txt
            # Replace \n with actual line breaks and format as list items
            echo "${{ github.event.inputs.other_changes }}" | sed 's/\\n/\n/g' | sed 's/^[[:space:]]*-*/- /' | sed '/^[[:space:]]*$/d' >> release_body.txt
            echo "" >> release_body.txt
          fi
          
          # Add installation and warning sections
          cat << 'EOF' >> release_body.txt
          ## üì¶ Installation
          ```bash
          npm install --dev @repixelcorp/hyper-pwt@${{ steps.version.outputs.version }}
          ```
          
          ## ‚ö†Ô∏è Warning
          This is a canary release and should not be used in production environments.
          EOF
          
          # Output the content
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat release_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: üöÄ ${{ steps.version.outputs.version }}
          body: ${{ steps.release_contents.outputs.body }}
          draft: false
          prerelease: true
      
      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Build package
        run: pnpm build

      - name: Publish to NPM
        run: |
          npm publish --tag canary --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}